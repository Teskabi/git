name: Java CI/CD to AWS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew (if using Gradle)
        if: ${{ github.event_name == 'push' }}
        run: chmod +x gradlew

      - name: Build with Maven
        if: ${{ contains(github.event.commits.*.message, 'maven') || contains(github.event.pull_request.title, 'maven') || contains(github.event.pull_request.body, 'maven') }}
        run: mvn clean install -DskipTests

      - name: Build with Gradle
        if: ${{ contains(github.event.commits.*.message, 'gradle') || contains(github.event.pull_request.title, 'gradle') || contains(github.event.pull_request.body, 'gradle') }}
        run: ./gradlew build -x test
==
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew (if using Gradle)
        if: ${{ github.event_name == 'push' }}
        run: chmod +x gradlew

      - name: Test with Maven
        if: ${{ contains(github.event.commits.*.message, 'maven') || contains(github.event.pull_request.title, 'maven') || contains(github.event.pull_request.body, 'maven') }}
        run: mvn test

      - name: Test with Gradle
        if: ${{ contains(github.event.commits.*.message, 'gradle') || contains(github.event.pull_request.title, 'gradle') || contains(github.event.pull_request.body, 'gradle') }}
        run: ./gradlew test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build deployment package (e.g., JAR or WAR)
        if: ${{ contains(github.event.commits.*.message, 'maven') || contains(github.event.pull_request.title, 'maven') || contains(github.event.pull_request.body, 'maven') }}
        run: mvn package -DskipTests

      - name: Build deployment package (e.g., JAR or WAR)
        if: ${{ contains(github.event.commits.*.message, 'gradle') || contains(github.event.pull_request.title, 'gradle') || contains(github.event.pull_request.body, 'gradle') }}
        run: ./gradlew jar

      - name: Deploy to AWS (Example: S3 and CodeDeploy)
        if: ${{ github.ref == 'refs/heads/main' }} # Only deploy from main branch
        run: |
          # Replace with your actual deployment commands
          echo "Deploying to AWS..."
          # Example for uploading to S3:
          # aws s3 cp target/*.jar s3://your-s3-bucket/
          # Example for triggering CodeDeploy deployment:
          # aws deploy create-deployment --application-name your-codedeploy-app --deployment-group-name your-deployment-group --s3-location bucket=your-s3-bucket,key=your-artifact.jar,bundleType=Zip
          echo "Deployment complete (replace with your actual AWS deployment logic)"
